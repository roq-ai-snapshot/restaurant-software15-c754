generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model feedback {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id   String?      @db.Uuid
  restaurant_id String?      @db.Uuid
  order_id      String?      @db.Uuid
  rating        Int
  comment       String?      @db.VarChar(255)
  users         users?       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders        orders?      @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu_categories {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  restaurant_id String?      @db.Uuid
  name          String       @db.VarChar(255)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menu_items    menu_items[]
}

model menu_items {
  id              String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category_id     String?          @db.Uuid
  name            String           @db.VarChar(255)
  description     String?          @db.VarChar(255)
  price           Int
  menu_categories menu_categories? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items     order_items[]
}

model order_items {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_id     String?     @db.Uuid
  menu_item_id String?     @db.Uuid
  quantity     Int
  menu_items   menu_items? @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders       orders?     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id                              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id                     String?       @db.Uuid
  restaurant_id                   String?       @db.Uuid
  waiter_id                       String?       @db.Uuid
  order_type                      String        @db.VarChar(255)
  special_requests                String?       @db.VarChar(255)
  discount                        Int?
  payment_status                  String        @db.VarChar(255)
  created_at                      DateTime      @default(now()) @db.Timestamp(6)
  feedback                        feedback[]
  order_items                     order_items[]
  users_orders_customer_idTousers users?        @relation("orders_customer_idTousers", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants                     restaurants?  @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_orders_waiter_idTousers   users?        @relation("orders_waiter_idTousers", fields: [waiter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservations {
  id               String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id      String?      @db.Uuid
  restaurant_id    String?      @db.Uuid
  reservation_time DateTime     @db.Timestamp(6)
  number_of_guests Int
  table_assignment Int?
  users            users?       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants      restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurants {
  id                  String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  owner_id            String?           @db.Uuid
  name                String            @db.VarChar(255)
  location            String            @db.VarChar(255)
  contact_information String            @db.VarChar(255)
  operating_hours     String            @db.VarChar(255)
  feedback            feedback[]
  menu_categories     menu_categories[]
  orders              orders[]
  reservations        reservations[]
  users               users?            @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff               staff[]
}

model staff {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?      @db.Uuid
  restaurant_id String?      @db.Uuid
  role          String       @db.VarChar(255)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role                             String         @db.VarChar(255)
  name                             String         @db.VarChar(255)
  email                            String         @unique @db.VarChar(255)
  password                         String         @db.VarChar(255)
  feedback                         feedback[]
  orders_orders_customer_idTousers orders[]       @relation("orders_customer_idTousers")
  orders_orders_waiter_idTousers   orders[]       @relation("orders_waiter_idTousers")
  reservations                     reservations[]
  restaurants                      restaurants[]
  staff                            staff[]
}
